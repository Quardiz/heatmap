{"version":3,"sources":["components/heatmap/heatmap.js","index.js"],"names":["HeatMap","props","state","data","fetch","then","answer","json","setState","drawHeatmap","baseTemperature","this","w","h","rect_width","monthlyVariance","length","minMaxVariance","d3","d","variance","xScale","domain","year","range","yScale","yAxisScale","colors","interpolator","svg","append","attr","style","refs","myDiv","selectAll","enter","month","text","xAxis","tickFormat","yAxis","call","legendDataScale","legendData","Array","keys","map","_","i","legendAxis","legend_width","tickValues","x","legend_step","ref","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b270ac2.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from \"d3\";\r\nimport './heatmap.css'\r\n\r\nexport default class HeatMap extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data: null,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json\")\r\n            .then(answer => answer.json())\r\n            .then(json => {\r\n                this.setState(()=>({data: json}), this.drawHeatmap);\r\n            });\r\n    }\r\n\r\n    drawHeatmap() {\r\n        const baseTemperature = this.state.data.baseTemperature;\r\n        const w = 1200;\r\n        const h = 800;\r\n        const padding = 100;\r\n        const rect_height = (h - 2 * padding) / 12;\r\n        const months = [1,2,3,4,5,6,7,8,9,10,11,12];\r\n        const rect_width = w / (this.state.data.monthlyVariance.length+3) * 12;\r\n\r\n        const minMaxVariance = [d3.min(this.state.data.monthlyVariance, d => d.variance), d3.max(this.state.data.monthlyVariance, d => d.variance)];\r\n\r\n        const xScale = d3.scaleLinear()\r\n            .domain([d3.min(this.state.data.monthlyVariance, d=>d.year), d3.max(this.state.data.monthlyVariance, d=>d.year)])\r\n            .range([padding, w-padding]);\r\n\r\n        const yScale = d3.scaleBand()\r\n            .domain(months)\r\n            //.range(months.map(d => h - 2 * padding - (d-1) * rect_height))\r\n            .range([h-padding, padding]);\r\n\r\n        const yAxisScale = d3.scaleBand()\r\n            .domain(\r\n                ['January',\r\n                'February',\r\n                'March',\r\n                'April',\r\n                'May',\r\n                'June',\r\n                'July',\r\n                'August',\r\n                'September',\r\n                'October',\r\n                'November',\r\n                'December']\r\n            )\r\n            .range([h-padding, padding])\r\n\r\n        var colors = d3.scaleSequential()\r\n            .domain(minMaxVariance)\r\n            .interpolator(d3.interpolatePlasma);\r\n        \r\n        var div = d3.select(\"body\").append(\"div\")\t\r\n            .attr(\"class\", \"tooltip\")\t\t\t\t\r\n            .style(\"opacity\", 0);\r\n\r\n        const svg = d3.select(this.refs.myDiv).append(\"svg\");\r\n\r\n        svg.attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"width\", w)\r\n            .attr(\"height\", h)\r\n        .selectAll(\"rect\")\r\n        .data(this.state.data.monthlyVariance)\r\n        .enter()\r\n            .append(\"rect\")\r\n            .attr(\"stroke-width\", 0)\r\n            .attr(\"x\", (d) => xScale(d.year))\r\n            .attr(\"y\", (d) => yScale(d.month))\r\n            .attr(\"width\", rect_width)\r\n            .attr(\"height\", rect_height)\r\n            .attr(\"fill\", (d) => colors(d.variance))\r\n            .attr(\"class\", \"heatMapRect\")\r\n            .append(\"title\")\r\n            .text(d => `Variance: ${d.variance}째C \\nTemperature: ${d.variance + baseTemperature}째C\\nYear: ${d.year}`);\r\n            // .on(\"mouseover\", (d) => {\r\n            //     div.transition()\r\n            //         .duration(200)\r\n            //         .style(\"opacity\", .9);\r\n            //     div.html(`<p>Variance: ${d.variance}째C</p> <br/> <p>Temperature: ${d.variance + baseTemperature}째C</p>`)\r\n            //         .style(\"left\", xScale(d.year) + \"px\")\r\n            //         .style(\"top\", (yScale(d.month) - 28) + \"px\");\r\n            // })\r\n            // .on(\"mouseout\", function(d) {\t\t\r\n            //     div.transition()\t\t\r\n            //         .duration(500)\t\t\r\n            //         .style(\"opacity\", 0);\t\r\n            // })\r\n            \r\n        \r\n        \r\n\r\n        const xAxis = d3.axisBottom(xScale)\r\n                        .tickFormat(d3.format(\".0f\"));\r\n        const yAxis = d3.axisLeft(yAxisScale);\r\n        \r\n        svg.append(\"text\")\r\n            .attr(\"x\", w/2-300)\r\n            .attr(\"y\", 0.6*padding)\r\n            .attr(\"font-size\", 30)\r\n            .text(\"Monthly Global Land-Surface Temperature\")\r\n\r\n        svg.append(\"text\")\r\n            .attr(\"x\", w-0.9*padding)\r\n            .attr(\"y\", h-0.7*padding)\r\n            .attr(\"font-size\", 20)\r\n            .text(\"Years\")\r\n        \r\n        // svg.append(\"text\")\r\n        //     .attr(\"x\", padding -20)\r\n        //     .attr(\"y\", h/2-padding)\r\n        //     .attr(\"transform\", `rotate(-90deg)`)\r\n        //     .text(\"Months\")\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(0, \" + (h - padding) + \")\")\r\n            .call(xAxis);\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + padding + \", \" + 0  + \")\")\r\n            .call(yAxis);\r\n\r\n        const legend_height = 50;\r\n        const legend_width = 400;\r\n        const steps = 10;\r\n        const legend_step = legend_width / steps;\r\n        const legendDataScale = d3.scaleLinear().domain([1, steps]).range(minMaxVariance);\r\n        const legendData = [...Array(steps).keys()].map((_, i) => i+1).map(i => legendDataScale(i));\r\n        const legendAxis = d3.axisBottom(\r\n                d3.scaleLinear()\r\n                    .domain([minMaxVariance[0] + baseTemperature, minMaxVariance[1] + baseTemperature])\r\n                    .range([0, legend_width-legend_step])\r\n                )\r\n            .tickValues(legendData.map(x => x + baseTemperature))\r\n            .tickFormat(d3.format(\".1f\"));\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", `translate(${w/2-legend_width+padding}, ${h-18})`)\r\n            .call(legendAxis)\r\n            .selectAll(\"rect\")\r\n            .data(legendData)\r\n            .enter()\r\n                .append(\"rect\")\r\n                .attr(\"x\", (_, i) => legend_step * i - legend_step/2)\r\n                .attr(\"y\", -rect_height)\r\n                .attr(\"width\", legend_step)\r\n                .attr(\"height\", rect_height)\r\n                .attr(\"fill\", (d) => colors(d));\r\n\r\n    }\r\n\r\n    render(){\r\n        if(this.state.data == null){\r\n            return <h1>Loading data.</h1>;\r\n        } else {\r\n           \r\n            return <div ref=\"myDiv\">\r\n\r\n            </div>;\r\n        }\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HeatMap from './components/heatmap/heatmap'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HeatMap></HeatMap>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}